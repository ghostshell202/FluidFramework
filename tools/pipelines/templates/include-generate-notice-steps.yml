# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: buildDirectory
  type: string
- name: requireNotice
  type: boolean

steps:
# special case server/routerlicious
- ${{ if eq(parameters.buildDirectory, 'server/routerlicious') }}:
  - task: Npm@1
    displayName: npm ci
    inputs:
      command: 'custom'
      workingDir: ${{ parameters.buildDirectory }}
      customCommand: 'ci --ignore-scripts'
      customRegistry: 'useNpmrc'
  - task: Bash@3
    displayName: 'Generate Mono repo package json'
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.buildDirectory }}
      script: |
      # Generate the package/package lock for the lerna project so we would scan it.
      node node_modules/@fluidframework/build-tools/dist/genMonoRepoPackageJson/genMonoRepoPackageJson.js --server
      cp repo-package.json packages/package.json
      cp repo-package-lock.json packages/package-lock.json

- task: ComponentGovernanceComponentDetection@0
  displayName: Component Detection
  inputs:
    sourceScanPath: ${{ parameters.buildDirectory }}
    verbosity: Verbose
    scanType: Register
    alertWarningLevel: High

- task: msospo.ospo-extension.8d7f9abb-6896-461d-9e25-4f74ed65ddb2.notice@0
  displayName: 'NOTICE File Generator'
  continueOnError: ${{ parameters.requireNotice }}

- task: DownloadPipelineArtifact@2
  displayName: 'Download NOTICE'
  continueOnError: ${{ parameters.requireNotice }}
  inputs:
    artifact: NOTICE.txt
    path: ${{ parameters.buildDirectory }}

# clean up for special case server/routerlicious
- ${{ if eq(parameters.buildDirectory, 'server/routerlicious') }}:
  - bash: |
      rm server/routerlicious/packages/package.json
      rm server/routerlicious/packages/package-lock.json
    displayName: 'Cleanup mono repo package json'
